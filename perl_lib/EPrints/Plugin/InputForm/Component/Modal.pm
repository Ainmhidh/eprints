package EPrints::Plugin::InputForm::Component::Modal;

use EPrints::Plugin::InputForm::Component;
@ISA = ( "EPrints::Plugin::InputForm::Component" );
use strict;


# Abstract class that handles Modal boxes on the Submission form
# actions / messages are handled by 87_component_field.js
#
# When creating a new Modal box, you are likely to implement the following methods:
#
# render_content(): the content shown in the modal box when it's shown
# action_XYZ(): actions performed on the modal box - usually a submit <input>
# json(): control the behaviour of the modal box on the UI given an action. For instance you may close the modal, reload the component, insert some HTML etc.
# 
# Note that <input>/actions should be inserted into a <form> generated by $self->render_form - this way you'll get all the parameters needed
# to glue the UI/JS to the Modal plugin
#

sub new
{
	my( $class, %opts ) = @_;

	my $self = $class->SUPER::new( %opts );

	$self->{name} = "InputForm Modal";
	$self->{visible} = "all";
	$self->{ajax} = "interactive";

	return $self;
}

sub wishes_to_export
{
	my( $self ) = @_;

	return $self->{session}->param( "export" );
}

sub export_mimetype { "application/json" }

sub json
{
	my( $self ) = @_;

	my $json = { stop => 1 };

	my $action_id = $self->{processor}->{action};
	if( defined $action_id )
	{
		$json->{action} = $action_id;
	}

	return $json;	
}

sub export
{
	my( $self ) = @_;
	my $plugin = $self->{session}->plugin( "Export::JSON" );
	binmode( STDOUT, ":utf8" );
	print $plugin->output_dataobj( $self->json );
}

sub action_cancel
{
	my( $self ) = @_;

	$self->{processor}->{redirect} = $self->{processor}->{return_to}
		if !$self->wishes_to_export;
}

sub from
{
        my( $self ) = @_;

	my $action_id = $self->get_internal_button;	
        
	if( EPrints::Utils::is_set( $action_id ) && $action_id ne 'null' )
        {
		$action_id =~ s/_(\d+)$//g;
		$self->{processor}->{action_param} = $1;
		$self->{processor}->{action} = $action_id;
                
		my $fn = "action_".$action_id;
		if( $self->can( $fn ) )
		{
			$self->$fn;
		}
		else
		{
			EPrints->abort( "Cannot call '$fn' on ".$self->get_subtype  );	
		}
        }
}

# main renderer for the Modal: title bar + content box
sub render
{
	my( $self ) = @_;

	my $session = $self->{session};

	my $modal_prefix = $self->{prefix}."_modal";

	my $frag = $session->make_element( 'div', class => 'ep_sr_component', id => $modal_prefix );

	my $titlebar = $frag->appendChild( $session->make_element( 'div', class => 'ep_sr_title_bar', id => $modal_prefix."_titlebar" ) );
	my $title = $titlebar->appendChild( $session->make_element( 'div', class => 'ep_sr_title' ) );
	$title->appendChild( $self->render_title );

	my $content = $frag->appendChild( $session->make_element( 'div', class => 'ep_sr_content', id => $modal_prefix."_content" ) );
	my $inner = $content->appendChild( $session->make_element( 'div', id => $modal_prefix."_content_inner" ) );

	$inner->appendChild( $self->render_content );

	return $frag;
}

# the main content area of the Modal
sub render_content
{
	my( $self ) = @_;

	return $self->{session}->make_doc_fragment;
}

# the title of the Modal
sub render_title
{
	my( $self, $surround ) = @_;

	return $self->html_phrase( 'title' );
}

# generates a link/button that will be picked up by 87_component_field.js - clicking on the button will open the modal box.
sub render_modal_link
{
        my( $self, %params ) = @_;

        my $ajax = $self->param( 'ajax' );
        return $self->{session}->make_doc_fragment unless( defined $ajax && $ajax eq 'interactive' );

	$params{value} = EPrints::Utils::tree_to_utf8( $self->render_title ) if( !exists $params{value} );
	delete $params{rel};
	delete $params{name};

	my $classes = delete $params{class} || [];
	push @$classes, $_ for( 'ep_form_action_button', 'epjs_ajax' );
	$params{class} = join( ' ', @$classes );

	my $button = $self->{session}->render_button(
                name => "_internal_".$self->{prefix}."_show_modal",
		rel => 'interactive',
		%params,
        );

        return $button;
}


sub render_form
{
        my( $self ) = @_;

	my $url = defined $self->{processor}->{url} ? $self->{processor}->{url}."#t" : '/cgi/users/home';

        my $form = $self->{session}->render_form( "post", $url );
	$form->setAttribute( 'onsubmit', 'return false' );
        $form->appendChild( $self->render_hidden_bits );

        return $form;
}

sub render_hidden_bits
{
        my( $self ) = @_;

        my $chunk = $self->{session}->make_doc_fragment;

        my @params = $self->hidden_bits;
        for(my $i = 0; $i < @params; $i+=2)
        {
                $chunk->appendChild( $self->{session}->render_hidden_field(
                                @params[$i,$i+1]
                        ) );
        }

        return $chunk;
}

sub hidden_bits
{
	my( $self ) = @_;

	return(
		screen => 'Workflow::Edit',
		dataobj => $self->{workflow}->{item}->id,
		dataset => $self->{workflow}->{item}->dataset->confid,
		stage => $self->{workflow}->get_stage_id,
	);
}

# arguments:
# action: the action to execute
# action_param: optional - extra param to pass on with the above action (e.g. a dataobj ID)
# action_element: optional - the ID of an HTML element to pass on with the action
# value: the text appearing in the button
# handler: optional - a JS handler to execute when the action is executed e.g. 'function(el) { alert( "test" ) }'
# id: optional - the ID of the button
sub render_modal_action_button
{
        my( $self, %opts ) = @_;

        my( $action, $aparam, $ael, $value, $handler, $id ) = @opts{qw( action action_param action_element value handler id )};

        my $session = $self->{session};
        my $frag = $session->make_doc_fragment;

        my %iparams = (
                type => 'submit',
                class => 'ep_form_action_button ep_component_action',
                value => $value,
                'data-internal' => $action
        );

        $iparams{'data-internal-param'} = $aparam if( defined $aparam );
        $iparams{'data-internal-element'} = $ael if( defined $ael );
	$iparams{'id'} = $id if( defined $id );

        $frag->appendChild( $session->make_element( 'input', %iparams ) );

        if( EPrints::Utils::is_set( $handler ) )
        {
                $frag->appendChild( $session->make_javascript( <<HANDLER ) );

if( \$( $self->{prefix} ) != null )
        \$( $self->{prefix} ).eprints.registerActionHandler( '$action', $handler );

HANDLER
        }

        return $frag;
}

1;
